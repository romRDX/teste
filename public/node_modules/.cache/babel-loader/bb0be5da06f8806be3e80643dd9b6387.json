{"ast":null,"code":"/**\r\n * Local Storage Comments Service.\r\n * Manipulate the comments object in local storage.\r\n */\nimport { v4 as uuid } from 'uuid';\nexport const post = newComment => {\n  const storedComments = get();\n  const formattedComment = { ...newComment,\n    id: uuid(),\n    created_at: Date.now(),\n    deleted: false\n  };\n\n  if (storedComments) {\n    const newStoredComments = [...storedComments, formattedComment];\n    localStorage.setItem('Sheetgo/Comments', JSON.stringify(newStoredComments));\n  } else {\n    const newCommentsStore = [formattedComment];\n    localStorage.setItem('Sheetgo/Comments', JSON.stringify(newCommentsStore));\n  }\n\n  return formattedComment;\n};\nexport const get = () => {\n  const commentStore = localStorage.getItem('Sheetgo/Comments');\n\n  if (commentStore) {\n    return JSON.parse(commentStore);\n  }\n};\nexport const put = comments => {\n  localStorage.removeItem('Sheetgo/Comments');\n  localStorage.setItem('Sheetgo/Comments', JSON.stringify(comments));\n};\nexport const patch = updatedComment => {\n  const storedComments = get();\n  const updatedStoredCommentss = storedComments.map(comment => {\n    if (comment.id === updatedComment.id) {\n      return updatedComment;\n    }\n  });\n  localStorage.setItem('Sheetgo/Comment', JSON.stringify(updatedStoredCommentss));\n};\nexport const deleteComment = commentId => {\n  const comments = get();\n  const updatedComments = comments.map(comment => {\n    if (comment.id === commentId) {\n      return { ...comment,\n        deleted: true\n      };\n    }\n  });\n  put(updatedComments);\n};","map":{"version":3,"sources":["C:/Users/romul/Desktop/Nova pasta/Sheetgo-BookShelf/src/services/commentStore.ts"],"names":["v4","uuid","post","newComment","storedComments","get","formattedComment","id","created_at","Date","now","deleted","newStoredComments","localStorage","setItem","JSON","stringify","newCommentsStore","commentStore","getItem","parse","put","comments","removeItem","patch","updatedComment","updatedStoredCommentss","map","comment","deleteComment","commentId","updatedComments"],"mappings":"AAAA;;;;AAIA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAGA,OAAO,MAAMC,IAAI,GAAIC,UAAD,IAA0B;AAC5C,QAAMC,cAAc,GAAGC,GAAG,EAA1B;AAEA,QAAMC,gBAAgB,GAAG,EACvB,GAAGH,UADoB;AAEvBI,IAAAA,EAAE,EAAEN,IAAI,EAFe;AAGvBO,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL,EAHW;AAIvBC,IAAAA,OAAO,EAAE;AAJc,GAAzB;;AAOA,MAAGP,cAAH,EAAkB;AAChB,UAAMQ,iBAAiB,GAAG,CAAC,GAAGR,cAAJ,EAAoBE,gBAApB,CAA1B;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,kBAArB,EAAyCC,IAAI,CAACC,SAAL,CAAeJ,iBAAf,CAAzC;AACD,GAHD,MAGO;AACL,UAAMK,gBAAgB,GAAG,CAAEX,gBAAF,CAAzB;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,kBAArB,EAAyCC,IAAI,CAACC,SAAL,CAAeC,gBAAf,CAAzC;AACD;;AAED,SAAOX,gBAAP;AACD,CAnBM;AAqBP,OAAO,MAAMD,GAAG,GAAG,MAAM;AACvB,QAAMa,YAAY,GAAGL,YAAY,CAACM,OAAb,CAAqB,kBAArB,CAArB;;AAEA,MAAGD,YAAH,EAAgB;AACd,WAAOH,IAAI,CAACK,KAAL,CAAWF,YAAX,CAAP;AACD;AACF,CANM;AAQP,OAAO,MAAMG,GAAG,GAAIC,QAAD,IAA0B;AAC3CT,EAAAA,YAAY,CAACU,UAAb,CAAwB,kBAAxB;AACAV,EAAAA,YAAY,CAACC,OAAb,CAAqB,kBAArB,EAAyCC,IAAI,CAACC,SAAL,CAAeM,QAAf,CAAzC;AACD,CAHM;AAKP,OAAO,MAAME,KAAK,GAAIC,cAAD,IAA8B;AAEjD,QAAMrB,cAAc,GAAGC,GAAG,EAA1B;AAEA,QAAMqB,sBAAsB,GAAGtB,cAAc,CAACuB,GAAf,CAAqBC,OAAD,IAAuB;AACxE,QAAGA,OAAO,CAACrB,EAAR,KAAekB,cAAc,CAAClB,EAAjC,EAAoC;AAClC,aAAOkB,cAAP;AACD;AACF,GAJ8B,CAA/B;AAMAZ,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAeU,sBAAf,CAAxC;AACD,CAXM;AAaP,OAAO,MAAMG,aAAa,GAAIC,SAAD,IAAuB;AAClD,QAAMR,QAAQ,GAAGjB,GAAG,EAApB;AAEA,QAAM0B,eAAe,GAAGT,QAAQ,CAACK,GAAT,CAAeC,OAAD,IAAuB;AAC3D,QAAGA,OAAO,CAACrB,EAAR,KAAeuB,SAAlB,EAA4B;AAC1B,aAAO,EACL,GAAGF,OADE;AAELjB,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;AACF,GAPuB,CAAxB;AASAU,EAAAA,GAAG,CAACU,eAAD,CAAH;AACD,CAbM","sourcesContent":["/**\r\n * Local Storage Comments Service.\r\n * Manipulate the comments object in local storage.\r\n */\r\nimport { v4 as uuid } from 'uuid';\r\nimport { IComment } from '../store/ducks/comments/types';\r\n\r\nexport const post = (newComment: IComment) => {\r\n  const storedComments = get();\r\n\r\n  const formattedComment = {\r\n    ...newComment,\r\n    id: uuid(),\r\n    created_at: Date.now(),\r\n    deleted: false,\r\n  }\r\n\r\n  if(storedComments){\r\n    const newStoredComments = [...storedComments, formattedComment];\r\n    localStorage.setItem('Sheetgo/Comments', JSON.stringify(newStoredComments));\r\n  } else {\r\n    const newCommentsStore = [ formattedComment ];\r\n    localStorage.setItem('Sheetgo/Comments', JSON.stringify(newCommentsStore));\r\n  }\r\n\r\n  return formattedComment;\r\n};\r\n\r\nexport const get = () => {\r\n  const commentStore = localStorage.getItem('Sheetgo/Comments');\r\n\r\n  if(commentStore){\r\n    return JSON.parse(commentStore);\r\n  }\r\n};\r\n\r\nexport const put = (comments: IComment[]) => {\r\n  localStorage.removeItem('Sheetgo/Comments')\r\n  localStorage.setItem('Sheetgo/Comments', JSON.stringify(comments));\r\n};\r\n\r\nexport const patch = (updatedComment: IComment) => {\r\n\r\n  const storedComments = get();\r\n\r\n  const updatedStoredCommentss = storedComments.map( (comment: IComment) => {\r\n    if(comment.id === updatedComment.id){\r\n      return updatedComment;\r\n    }\r\n  })\r\n\r\n  localStorage.setItem('Sheetgo/Comment', JSON.stringify(updatedStoredCommentss));\r\n};\r\n\r\nexport const deleteComment = (commentId: string) => {\r\n  const comments = get();\r\n\r\n  const updatedComments = comments.map( (comment: IComment) => {\r\n    if(comment.id === commentId){\r\n      return {\r\n        ...comment,\r\n        deleted: true\r\n      }\r\n    }\r\n  })\r\n\r\n  put(updatedComments);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}