{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\romul\\\\Desktop\\\\Nova pasta\\\\Sheetgo-BookShelf\\\\src\\\\pages\\\\BookDetails\\\\components\\\\Comments\\\\index.tsx\";\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { createComment, editComment, deleteComment } from '../../../../store/ducks/comments/actions';\nimport * as commentStore from '../../../../services/commentStore';\nimport orderBy from '../../../../utils/orderBy';\nimport Input from '../../../../components/Input';\nimport TextArea from '../../../../components/TextArea';\nimport Comment from './components/comment';\nimport { Form } from '@unform/web';\nimport { Container, Content, AddCommentSection, CommentsSection } from './styles';\n\nconst Comments = ({\n  comments,\n  dispatch,\n  selectedBook,\n  setIsOpen\n}) => {\n  const [bookComments, setBookComments] = useState([]);\n  useEffect(() => {\n    commentStore.put(comments);\n  }, [comments]);\n  useEffect(() => {\n    setBookComments(comments);\n  }, [comments]);\n  const handleSubmit = useCallback(comment => {\n    const newComment = { ...comment,\n      parentId: selectedBook.id\n    };\n    const formattedComment = commentStore.post(newComment);\n    dispatch(createComment(formattedComment));\n  }, [selectedBook, dispatch]);\n  const handleEditComment = useCallback(updatedComment => {\n    dispatch(editComment(updatedComment));\n  }, [dispatch]);\n  const handleDeleteComment = useCallback(commentId => {\n    dispatch(deleteComment(commentId));\n    commentStore.deleteComment(commentId);\n  }, [dispatch]);\n  const formattedComments = useMemo(() => {\n    const thisBookComments = bookComments.filter(comment => comment.parentId === selectedBook.id);\n    return orderBy(thisBookComments, 'DATE', 'DESC');\n  }, [bookComments, selectedBook]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Comments\"), /*#__PURE__*/React.createElement(CommentsSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, formattedComments && formattedComments.map(comment => !comment.deleted && /*#__PURE__*/React.createElement(Comment, {\n    key: comment.id,\n    handleEditComment: handleEditComment,\n    handleDeleteComment: handleDeleteComment,\n    comment: comment,\n    setIsOpen: setIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(AddCommentSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Add your comment\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"author\",\n    placeholder: \"Type your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    name: \"body\",\n    placeholder: \"Type your comment here\",\n    rows: 9,\n    cols: 85,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    \"data-testid\": \"add-book-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Publish\")))));\n};\n\nconst mapStateToProps = state => ({\n  comments: state.comments.data\n});\n\nexport default connect(mapStateToProps)(Comments);","map":{"version":3,"sources":["C:/Users/romul/Desktop/Nova pasta/Sheetgo-BookShelf/src/pages/BookDetails/components/Comments/index.tsx"],"names":["React","useState","useEffect","useMemo","useCallback","connect","createComment","editComment","deleteComment","commentStore","orderBy","Input","TextArea","Comment","Form","Container","Content","AddCommentSection","CommentsSection","Comments","comments","dispatch","selectedBook","setIsOpen","bookComments","setBookComments","put","handleSubmit","comment","newComment","parentId","id","formattedComment","post","handleEditComment","updatedComment","handleDeleteComment","commentId","formattedComments","thisBookComments","filter","map","deleted","mapStateToProps","state","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,WAA9C,QAAiE,OAAjE;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,aAArC,QAA0D,0CAA1D;AACA,OAAO,KAAKC,YAAZ,MAA8B,mCAA9B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEA,SAASC,IAAT,QAAqB,aAArB;AAKA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,iBAA7B,EAAgDC,eAAhD,QAAuE,UAAvE;;AAeA,MAAMC,QAA8B,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,YAArB;AAAmCC,EAAAA;AAAnC,CAAD,KAAmD;AACxF,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAa,EAAb,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZO,IAAAA,YAAY,CAACiB,GAAb,CAAiBN,QAAjB;AACD,GAFQ,EAEP,CAACA,QAAD,CAFO,CAAT;AAIAlB,EAAAA,SAAS,CAAC,MAAI;AACZuB,IAAAA,eAAe,CAACL,QAAD,CAAf;AACD,GAFQ,EAEP,CAACA,QAAD,CAFO,CAAT;AAIA,QAAMO,YAAY,GAAGvB,WAAW,CAAEwB,OAAD,IAAuB;AACtD,UAAMC,UAAU,GAAG,EACjB,GAAGD,OADc;AAEjBE,MAAAA,QAAQ,EAAER,YAAY,CAACS;AAFN,KAAnB;AAKA,UAAMC,gBAAgB,GAAGvB,YAAY,CAACwB,IAAb,CAAkBJ,UAAlB,CAAzB;AACAR,IAAAA,QAAQ,CAACf,aAAa,CAAC0B,gBAAD,CAAd,CAAR;AACD,GAR+B,EAQ7B,CAACV,YAAD,EAAeD,QAAf,CAR6B,CAAhC;AAUA,QAAMa,iBAAiB,GAAG9B,WAAW,CAAG+B,cAAD,IAA8B;AACnEd,IAAAA,QAAQ,CAACd,WAAW,CAAC4B,cAAD,CAAZ,CAAR;AACD,GAFoC,EAElC,CAACd,QAAD,CAFkC,CAArC;AAIA,QAAMe,mBAAmB,GAAGhC,WAAW,CAAGiC,SAAD,IAAuB;AAC9DhB,IAAAA,QAAQ,CAACb,aAAa,CAAC6B,SAAD,CAAd,CAAR;AACA5B,IAAAA,YAAY,CAACD,aAAb,CAA2B6B,SAA3B;AACD,GAHsC,EAGpC,CAAChB,QAAD,CAHoC,CAAvC;AAKA,QAAMiB,iBAAiB,GAAGnC,OAAO,CAAC,MAAM;AACtC,UAAMoC,gBAAgB,GAAGf,YAAY,CAACgB,MAAb,CAAqBZ,OAAO,IAAIA,OAAO,CAACE,QAAR,KAAqBR,YAAY,CAACS,EAAlE,CAAzB;AACA,WAAOrB,OAAO,CAAC6B,gBAAD,EAAmB,MAAnB,EAA2B,MAA3B,CAAd;AACD,GAHgC,EAG9B,CAACf,YAAD,EAAeF,YAAf,CAH8B,CAAjC;AAKA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIgB,iBAAiB,IACjBA,iBAAiB,CAACG,GAAlB,CAAwBb,OAAD,IACrB,CAACA,OAAO,CAACc,OAAT,iBACA,oBAAC,OAAD;AACE,IAAA,GAAG,EAAEd,OAAO,CAACG,EADf;AAEE,IAAA,iBAAiB,EAAEG,iBAFrB;AAGE,IAAA,mBAAmB,EAAEE,mBAHvB;AAIE,IAAA,OAAO,EAAER,OAJX;AAKE,IAAA,SAAS,EAAEL,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFJ,CAFF,eAgBE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,eAEE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEI,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,WAAW,EAAC,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,MAAf;AAAsB,IAAA,WAAW,EAAC,wBAAlC;AAA2D,IAAA,IAAI,EAAE,CAAjE;AAAoE,IAAA,IAAI,EAAE,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,mBAAY,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CAFF,CAhBF,CADF,CADF;AA6BD,CAhED;;AAkEA,MAAMgB,eAAe,GAAIC,KAAD,KAAmB;AACzCxB,EAAAA,QAAQ,EAAEwB,KAAK,CAACxB,QAAN,CAAeyB;AADgB,CAAnB,CAAxB;;AAIA,eAAexC,OAAO,CAACsC,eAAD,CAAP,CAAyBxB,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { createComment, editComment, deleteComment } from '../../../../store/ducks/comments/actions';\r\nimport * as commentStore from '../../../../services/commentStore';\r\nimport orderBy from '../../../../utils/orderBy';\r\n\r\nimport Input from '../../../../components/Input';\r\nimport TextArea from '../../../../components/TextArea';\r\nimport Comment from './components/comment';\r\n\r\nimport { Form } from '@unform/web';\r\n\r\nimport { IComment } from '../../../../store/ducks/comments/types';\r\nimport { IBook } from '../../../../store/ducks/books/types';\r\n\r\nimport { Container, Content, AddCommentSection, CommentsSection } from './styles';\r\n\r\ninterface State {\r\n  comments: {\r\n    data: IComment[]\r\n  }\r\n}\r\n\r\ninterface StateProps {\r\n  comments: IComment[];\r\n  selectedBook: IBook;\r\n  dispatch: Dispatch;\r\n  setIsOpen: (comment: IComment) => void;\r\n}\r\n\r\nconst Comments: React.FC<StateProps> = ({comments, dispatch, selectedBook, setIsOpen}) => {\r\n  const [bookComments, setBookComments] = useState<IComment[]>([]);\r\n\r\n  useEffect(()=>{\r\n    commentStore.put(comments);\r\n  },[comments]);\r\n\r\n  useEffect(()=>{\r\n    setBookComments(comments);\r\n  },[comments]);\r\n\r\n  const handleSubmit = useCallback((comment: IComment) => {\r\n    const newComment = {\r\n      ...comment,\r\n      parentId: selectedBook.id\r\n    }\r\n\r\n    const formattedComment = commentStore.post(newComment);\r\n    dispatch(createComment(formattedComment));\r\n  }, [selectedBook, dispatch]);\r\n\r\n  const handleEditComment = useCallback( (updatedComment: IComment) => {\r\n    dispatch(editComment(updatedComment));\r\n  }, [dispatch]);\r\n\r\n  const handleDeleteComment = useCallback( (commentId: string) => {\r\n    dispatch(deleteComment(commentId));\r\n    commentStore.deleteComment(commentId);\r\n  }, [dispatch]);\r\n\r\n  const formattedComments = useMemo(() => {\r\n    const thisBookComments = bookComments.filter( comment => comment.parentId === selectedBook.id);\r\n    return orderBy(thisBookComments, 'DATE', 'DESC');\r\n  }, [bookComments, selectedBook]);\r\n\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <h3>Comments</h3>\r\n        <CommentsSection>\r\n          { formattedComments &&\r\n            formattedComments.map( (comment: IComment) => (\r\n              !comment.deleted &&\r\n              <Comment\r\n                key={comment.id}\r\n                handleEditComment={handleEditComment}\r\n                handleDeleteComment={handleDeleteComment}\r\n                comment={comment}\r\n                setIsOpen={setIsOpen}\r\n              />\r\n            ))\r\n          }\r\n        </CommentsSection>\r\n        <AddCommentSection>\r\n        <h3>Add your comment</h3>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Input name=\"author\" placeholder=\"Type your name\" />\r\n            <TextArea name=\"body\" placeholder=\"Type your comment here\" rows={9} cols={85} />\r\n            <button type=\"submit\" data-testid=\"add-book-button\">Publish</button>\r\n          </Form>\r\n        </AddCommentSection>\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  comments: state.comments.data,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Comments);\r\n"]},"metadata":{},"sourceType":"module"}