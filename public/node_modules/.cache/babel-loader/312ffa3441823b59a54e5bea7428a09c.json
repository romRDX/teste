{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\romul\\\\Desktop\\\\Nova pasta\\\\Sheetgo-BookShelf\\\\src\\\\pages\\\\Dashboard\\\\index.tsx\";\nimport React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { createBook } from '../../store/ducks/books/actions';\nimport * as bookStore from '../../services/bookStore';\nimport orderBy from '../../utils/orderBy';\nimport filterBy from '../../utils/filterBy';\nimport ModalAddBook from '../../components/ModalAddBook';\nimport Header from '../../components/Header';\nimport BooksContainer from '../../components/BooksContainer';\nimport { CollectionsBookmark } from '@material-ui/icons';\nimport { FiBook, FiBookOpen } from 'react-icons/fi';\nimport { Container, Content, SectionTitle } from './styles';\n\nconst Dashboard = ({\n  books,\n  dispatch\n}) => {\n  const [availableBooks, setAvailableBooks] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [orderType, setOrderType] = useState('A-Z');\n  const [orderDirection, setOrderDirection] = useState('ASC');\n  const [nameFilter, setNameFilter] = useState('');\n  const [selectedView, setSelectedView] = useState('home'); // Updates availableBooks state whenever there is a change on global state\n\n  useEffect(() => {\n    setAvailableBooks(books);\n  }, [books]); // Update local storage state whenever there is a change on availableBooks local state\n\n  useEffect(() => {\n    bookStore.put(availableBooks);\n  }, [availableBooks]); // Modal toggle open/close\n\n  const toggleModal = useCallback(() => {\n    setModalOpen(!modalOpen);\n  }, [setModalOpen, modalOpen]);\n  const handleAddBook = useCallback(newBook => {\n    // Update local storage state with the new created book\n    const createdBook = bookStore.post(newBook); // Update global redux storage state with the new created book\n\n    dispatch(createBook(createdBook));\n  }, [dispatch]);\n  const handleChangeView = useCallback(view => {\n    setSelectedView(view);\n  }, []);\n  /* All constants below creates formatted books arrays already filtered by category\r\n  *  and possibly also filtered by name and ordened by Date or A-Z\r\n  */\n\n  const uncategorizedBooks = useMemo(() => {\n    const filteredBooks = filterBy(availableBooks, 'uncategorized', nameFilter);\n    return orderBy(filteredBooks, orderType, orderDirection);\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\n  const wantToReadBooks = useMemo(() => {\n    const filteredBooks = filterBy(availableBooks, 'wantToRead', nameFilter);\n    return orderBy(filteredBooks, orderType, orderDirection);\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\n  const currentlyReadingBooks = useMemo(() => {\n    const filteredBooks = filterBy(availableBooks, 'reading', nameFilter);\n    return orderBy(filteredBooks, orderType, orderDirection);\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\n  const readBooks = useMemo(() => {\n    const filteredBooks = filterBy(availableBooks, 'read', nameFilter);\n    return orderBy(filteredBooks, orderType, orderDirection);\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    toggleModal: toggleModal,\n    setOrderType: setOrderType,\n    setOrderDirection: setOrderDirection,\n    nameFilter: nameFilter,\n    setNameFilter: setNameFilter,\n    handleChangeView: handleChangeView,\n    orderBy: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ModalAddBook, {\n    isOpen: modalOpen,\n    setIsOpen: toggleModal,\n    handleAddBook: handleAddBook,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, selectedView === 'home' && /*#__PURE__*/React.createElement(BooksContainer, {\n    booksProps: uncategorizedBooks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SectionTitle, {\n    onClick: () => setSelectedView('home'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Uncategorized Books\")), (selectedView === 'home' || selectedView === 'wantToRead') && /*#__PURE__*/React.createElement(BooksContainer, {\n    booksProps: wantToReadBooks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SectionTitle, {\n    onClick: () => setSelectedView('wantToRead'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Want to read Books \", /*#__PURE__*/React.createElement(CollectionsBookmark, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 92\n    }\n  }))), (selectedView === 'home' || selectedView === 'currentlyReading') && /*#__PURE__*/React.createElement(BooksContainer, {\n    booksProps: currentlyReadingBooks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SectionTitle, {\n    onClick: () => setSelectedView('currentlyReading'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Currently reading books Books\", /*#__PURE__*/React.createElement(FiBookOpen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 108\n    }\n  }))), (selectedView === 'home' || selectedView === 'read') && /*#__PURE__*/React.createElement(BooksContainer, {\n    booksProps: readBooks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SectionTitle, {\n    onClick: () => setSelectedView('read'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Read Books\", /*#__PURE__*/React.createElement(FiBook, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 77\n    }\n  })))));\n};\n\nconst mapStateToProps = state => ({\n  books: state.books.data\n});\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["C:/Users/romul/Desktop/Nova pasta/Sheetgo-BookShelf/src/pages/Dashboard/index.tsx"],"names":["React","useState","useCallback","useEffect","useMemo","connect","createBook","bookStore","orderBy","filterBy","ModalAddBook","Header","BooksContainer","CollectionsBookmark","FiBook","FiBookOpen","Container","Content","SectionTitle","Dashboard","books","dispatch","availableBooks","setAvailableBooks","modalOpen","setModalOpen","orderType","setOrderType","orderDirection","setOrderDirection","nameFilter","setNameFilter","selectedView","setSelectedView","put","toggleModal","handleAddBook","newBook","createdBook","post","handleChangeView","view","uncategorizedBooks","filteredBooks","wantToReadBooks","currentlyReadingBooks","readBooks","mapStateToProps","state","data"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createBook } from '../../store/ducks/books/actions';\r\nimport * as bookStore from '../../services/bookStore';\r\n\r\nimport orderBy from '../../utils/orderBy';\r\nimport filterBy from '../../utils/filterBy';\r\n\r\nimport ModalAddBook from '../../components/ModalAddBook';\r\nimport Header from '../../components/Header';\r\nimport BooksContainer from '../../components/BooksContainer';\r\nimport { CollectionsBookmark } from '@material-ui/icons';\r\nimport { FiBook, FiBookOpen } from 'react-icons/fi';\r\n\r\nimport { Container, Content, SectionTitle } from './styles';\r\n\r\nimport { IBook } from '../../store/ducks/books/types';\r\nimport { Props, State} from './types';\r\n\r\nconst Dashboard: React.FC<Props> = ({books, dispatch}) => {\r\n  const [availableBooks, setAvailableBooks] = useState<IBook[]>([]);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [orderType, setOrderType] = useState('A-Z');\r\n  const [orderDirection, setOrderDirection] = useState('ASC');\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [selectedView,setSelectedView] = useState('home');\r\n\r\n  // Updates availableBooks state whenever there is a change on global state\r\n  useEffect(()=> {\r\n      setAvailableBooks(books);\r\n  }, [books]);\r\n\r\n  // Update local storage state whenever there is a change on availableBooks local state\r\n  useEffect(()=>{\r\n    bookStore.put(availableBooks);\r\n  },[availableBooks]);\r\n\r\n  // Modal toggle open/close\r\n  const toggleModal = useCallback( (): void => {\r\n    setModalOpen(!modalOpen);\r\n  },[setModalOpen, modalOpen]);\r\n\r\n\r\n  const handleAddBook = useCallback( (newBook: IBook): void => {\r\n    // Update local storage state with the new created book\r\n    const createdBook = bookStore.post(newBook);\r\n\r\n    // Update global redux storage state with the new created book\r\n    dispatch(createBook(createdBook));\r\n  }, [dispatch]);\r\n\r\n  const handleChangeView = useCallback( (view: string) => {\r\n    setSelectedView(view);\r\n  },[]);\r\n\r\n  /* All constants below creates formatted books arrays already filtered by category\r\n  *  and possibly also filtered by name and ordened by Date or A-Z\r\n  */\r\n  const uncategorizedBooks = useMemo(() => {\r\n    const filteredBooks = filterBy(availableBooks, 'uncategorized', nameFilter);\r\n    return orderBy(filteredBooks, orderType, orderDirection);\r\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\r\n\r\n  const wantToReadBooks = useMemo(() => {\r\n    const filteredBooks = filterBy(availableBooks, 'wantToRead', nameFilter);\r\n    return orderBy(filteredBooks, orderType, orderDirection);\r\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\r\n\r\n  const currentlyReadingBooks = useMemo(() => {\r\n    const filteredBooks = filterBy(availableBooks, 'reading', nameFilter);\r\n    return orderBy(filteredBooks, orderType, orderDirection);\r\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\r\n\r\n  const readBooks = useMemo(() => {\r\n    const filteredBooks = filterBy(availableBooks, 'read', nameFilter);\r\n    return orderBy(filteredBooks, orderType, orderDirection);\r\n  }, [availableBooks, orderType, orderDirection, nameFilter]);\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        toggleModal={toggleModal}\r\n        setOrderType={setOrderType}\r\n        setOrderDirection={setOrderDirection}\r\n        nameFilter={nameFilter}\r\n        setNameFilter={setNameFilter}\r\n        handleChangeView={handleChangeView}\r\n        orderBy\r\n      />\r\n\r\n      <ModalAddBook\r\n        isOpen={modalOpen}\r\n        setIsOpen={toggleModal}\r\n        handleAddBook={handleAddBook}\r\n      />\r\n\r\n      <Content>\r\n        { selectedView === 'home' &&\r\n          <BooksContainer booksProps={uncategorizedBooks}>\r\n            <SectionTitle onClick={() => setSelectedView('home')}>Uncategorized Books</SectionTitle>\r\n          </BooksContainer>\r\n        }\r\n\r\n        { (selectedView === 'home' || selectedView === 'wantToRead') &&\r\n          <BooksContainer booksProps={wantToReadBooks}>\r\n            <SectionTitle onClick={() => setSelectedView('wantToRead')}>Want to read Books <CollectionsBookmark /></SectionTitle>\r\n          </BooksContainer>\r\n        }\r\n\r\n        { (selectedView === 'home' || selectedView === 'currentlyReading') &&\r\n          <BooksContainer booksProps={currentlyReadingBooks}>\r\n            <SectionTitle onClick={() => setSelectedView('currentlyReading')}>Currently reading books Books<FiBookOpen /></SectionTitle>\r\n          </BooksContainer>\r\n        }\r\n\r\n        { (selectedView === 'home' || selectedView === 'read') &&\r\n          <BooksContainer booksProps={readBooks}>\r\n            <SectionTitle onClick={() => setSelectedView('read')}>Read Books<FiBook /></SectionTitle>\r\n          </BooksContainer>\r\n        }\r\n      </Content>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n  books: state.books.data,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n"]},"metadata":{},"sourceType":"module"}