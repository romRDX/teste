{"ast":null,"code":"import { CommentsTypes } from './types';\nimport initialState from './initialState';\nimport * as commentStore from '../../../services/commentStore';\nconst storedComments = commentStore.get();\nconst INITIAL_STATE = {\n  data: storedComments ? storedComments : initialState\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CommentsTypes.CREATE_COMMENT:\n      return { ...state,\n        data: [...state.data, action.newComment]\n      };\n\n    case CommentsTypes.EDIT_COMMENT:\n      {\n        const newData = state.data.map(comment => {\n          if (comment.id === action.newComment.id) {\n            console.log('a ', action.newComment);\n            return action.newComment;\n          } else {\n            console.log('b');\n            return comment;\n          }\n        });\n        return { ...state,\n          data: newData\n        };\n      }\n\n    case CommentsTypes.DELETE_COMMENT:\n      {\n        const newData = state.data.map(comment => {\n          if (comment.id === action.commentId) {\n            return { ...comment,\n              deleted: true\n            };\n          } else {\n            return comment;\n          }\n        });\n        return { ...state,\n          data: newData\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/romul/Desktop/Nova pasta/Sheetgo-BookShelf/src/store/ducks/comments/index.js"],"names":["CommentsTypes","initialState","commentStore","storedComments","get","INITIAL_STATE","data","reducer","state","action","type","CREATE_COMMENT","newComment","EDIT_COMMENT","newData","map","comment","id","console","log","DELETE_COMMENT","commentId","deleted"],"mappings":"AAAA,SAASA,aAAT,QAA8B,SAA9B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,KAAKC,YAAZ,MAA8B,gCAA9B;AAEA,MAAMC,cAAc,GAAGD,YAAY,CAACE,GAAb,EAAvB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAEH,cAAc,GAAGA,cAAH,GAAoBF;AADpB,CAAtB;;AAIA,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAa,CAACW,cAAnB;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBG,MAAM,CAACG,UAAvB;AAFD,OAAP;;AAKF,SAAKZ,aAAa,CAACa,YAAnB;AAAiC;AAC/B,cAAMC,OAAO,GAAGN,KAAK,CAACF,IAAN,CAAWS,GAAX,CAAiBC,OAAD,IAAa;AAC3C,cAAKA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACG,UAAP,CAAkBK,EAAtC,EAA0C;AACxCC,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBV,MAAM,CAACG,UAAzB;AACA,mBAAOH,MAAM,CAACG,UAAd;AACD,WAHD,MAGO;AACLM,YAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,mBAAOH,OAAP;AACD;AACF,SARe,CAAhB;AAUA,eAAO,EACL,GAAGR,KADE;AAELF,UAAAA,IAAI,EAAEQ;AAFD,SAAP;AAID;;AAED,SAAKd,aAAa,CAACoB,cAAnB;AAAmC;AACjC,cAAMN,OAAO,GAAGN,KAAK,CAACF,IAAN,CAAWS,GAAX,CAAiBC,OAAD,IAAa;AAC3C,cAAKA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACY,SAA3B,EAAsC;AACpC,mBAAO,EACL,GAAGL,OADE;AAELM,cAAAA,OAAO,EAAE;AAFJ,aAAP;AAID,WALD,MAKO;AACL,mBAAON,OAAP;AACD;AACF,SATe,CAAhB;AAWA,eAAO,EACL,GAAGR,KADE;AAELF,UAAAA,IAAI,EAAEQ;AAFD,SAAP;AAID;;AAED;AACE,aAAON,KAAP;AA3CJ;AA6CD,CA9CD;;AAgDA,eAAeD,OAAf","sourcesContent":["import { CommentsTypes } from './types';\r\n\r\nimport initialState from './initialState';\r\n\r\nimport * as commentStore from '../../../services/commentStore';\r\n\r\nconst storedComments = commentStore.get();\r\n\r\nconst INITIAL_STATE = {\r\n  data: storedComments ? storedComments : initialState,\r\n};\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case CommentsTypes.CREATE_COMMENT:\r\n      return {\r\n        ...state,\r\n        data: [...state.data, action.newComment],\r\n      };\r\n\r\n    case CommentsTypes.EDIT_COMMENT: {\r\n      const newData = state.data.map( (comment) => {\r\n        if ( comment.id === action.newComment.id) {\r\n          console.log('a ', action.newComment);\r\n          return action.newComment;\r\n        } else {\r\n          console.log('b');\r\n          return comment;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        data: newData\r\n      }\r\n    }\r\n\r\n    case CommentsTypes.DELETE_COMMENT: {\r\n      const newData = state.data.map( (comment) => {\r\n        if ( comment.id === action.commentId) {\r\n          return {\r\n            ...comment,\r\n            deleted: true\r\n          };\r\n        } else {\r\n          return comment;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        data: newData\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}